#!/usr/bin/env python
"""
qr - Convert stdin (or the first argument) to a QR Code.

When stdout is a tty the QR Code is printed to the terminal and when stdout is
a pipe to a file an image is written. The default image format is PNG.
"""
import sys
import optparse
import qrcode

def main(*args):
    qr = qrcode.QRCode()
    if args:
        parser = optparse.OptionParser(usage=__doc__.strip())
        parser.add_option("--pil", action="store_true",
                          default=False,
                          help="Create a PIL (PNG) image")
        parser.add_option("--svg", action="store_true",
                          default=False,
                          help="Create a standalone SVG image")
        parser.add_option("--svg-fragment", action="store_true",
                          default=False,
                          help="Create an embeddable SVG fragment")
        opts, args = parser.parse_args(list(args))

        formats = reduce(lambda a, b: int(a) + int(b),
                         (opts.pil, opts.svg, opts.svg_fragment))
        if formats > 1:
            parser.error("Can't create more than one image format at a time")

    if args:
        qr.add_data(args[0])
    else:
        qr.add_data(sys.stdin.read())

    if opts.pil:
        from qrcode.image.pil import PilImage
        image_factory = PilImage
    elif opts.svg:
        from qrcode.image.svg import SvgImage
        image_factory = SvgImage
    elif opts.svg_fragment:
        from qrcode.image.svg import SvgFragmentImage
        image_factory = SvgFragmentImage
    else:
        image_factory = None

    if image_factory is None and sys.stdout.isatty():
        qr.print_tty()
        return

    img = qr.make_image(image_factory=image_factory)
    img.save(sys.stdout)


if __name__ == "__main__":
    main(*sys.argv[1:])
